#BlueJ class context
comment0.target=Graph
comment1.params=s
comment1.target=Graph(java.lang.String)
comment1.text=\n\ Constructor\ of\ a\ graph\ from\ g6\ code\n
comment10.params=
comment10.target=double[][]\ Mmatrix()
comment11.params=mat
comment11.target=double[]\ spectrum(int[][])
comment11.text=\n\ \ Auxiliary\ function\ to\ find\ eigenvalues\ of\ an\ integer\ matrix.\n\ \ "static"\ means\ it\ is\ a\ method\ of\ the\ class\ itself,\n\ \ so\ that\ it\ has\ to\ be\ called\ as\ Graph.spectrum(matrix).\n\ \ Assumption\:\ mat\ is\ a\ square\ matrix\n
comment12.params=dmat
comment12.target=double[]\ spectrum(double[][])
comment12.text=\ \n\ Auxiliary\ function\ to\ find\ eigenvalues\ of\ a\ double\ matrix.\n\ "static"\ means\ it\ is\ a\ method\ of\ the\ class\ itself,\n\ so\ that\ it\ has\ to\ be\ called\ as\ Graph.spectrum(matrix).\n\ Assumption\:\ mat\ is\ a\ square\ matrix\n
comment13.params=mat
comment13.target=double[][]\ eigenvectors(int[][])
comment13.text=\ \n\ Auxiliary\ function\ to\ find\ eigenvectors\ of\ an\ integer\ matrix.\n\ Eigenvectors\ are\ returned\ in\ columns.\n\ Assumption\:\ mat\ is\ a\ square\ matrix\n
comment14.params=dmat
comment14.target=double[][]\ eigenvectors(double[][])
comment14.text=\ \n\ Auxiliary\ function\ to\ find\ eigenvectors\ of\ a\ double\ matrix.\n\ Eigenvectors\ are\ returned\ in\ columns.\n\ Assumption\:\ mat\ is\ a\ square\ matrix\n
comment15.params=
comment15.target=double[]\ Aspectrum()
comment15.text=\ \n\ Adjacency\ spectrum\ and\ eigenvectors\n\ Aspectrum()[0]\ is\ the\ smallest,\ Aspectrum()[n-1]\ is\ the\ largest\ eigenvalue\n
comment16.params=
comment16.target=double[][]\ Aeigenvectors()
comment17.params=
comment17.target=double[]\ Lspectrum()
comment17.text=\ \n\ Laplacian\ spectrum\ and\ eigenvectors\n\ Lspectrum()[0]\ is\ the\ smallest,\ Lspectrum()[n-1]\ is\ the\ largest\ eigenvalue\n
comment18.params=
comment18.target=double[][]\ Leigenvectors()
comment19.params=
comment19.target=double[]\ Qspectrum()
comment19.text=\n\ Signless\ Laplacian\ spectrum\ and\ eigenvectors\n\ Qspectrum()[0]\ is\ the\ smallest,\ Qspectrum()[n-1]\ is\ the\ largest\ eigenvalue\n
comment2.params=A
comment2.target=Graph(int[][])
comment2.text=\n\ \ Constructor\ of\ a\ graph\ from\ provided\ adjacency\ matrix\n\ \ May\ be\ used\ to\ create\ graph\ complement\ or\ results\ of\ other\ graph\ operations\n\ \ Assumption\:\ A\ is\ a\ symmetric,\ (0,1)-matrix\n
comment20.params=
comment20.target=double[][]\ Qeigenvectors()
comment21.params=
comment21.target=double[]\ Dspectrum()
comment21.text=\ \n\ Distance\ spectrum\ and\ eigenvectors\n\ Dspectrum()[0]\ is\ the\ smallest,\ Dspectrum()[n-1]\ is\ the\ largest\ eigenvalue\n
comment22.params=
comment22.target=double[][]\ Deigenvectors()
comment23.params=
comment23.target=double[]\ Mspectrum()
comment23.text=\ \n\ Modularity\ spectrum\n\ Mspectrum()[0]\ is\ the\ smallest,\ Mspectrum()[n-1]\ is\ the\ largest\ eigenvalue\n
comment24.params=
comment24.target=double[][]\ Meigenvectors()
comment25.params=h
comment25.target=boolean\ Acospectral(Graph)
comment25.text=\ \n\ Checks\ whether\ two\ graphs\ have\ the\ same\ adjacency\ spectrum\n
comment26.params=h
comment26.target=boolean\ Lcospectral(Graph)
comment26.text=\n\ Checks\ whether\ two\ graphs\ have\ the\ same\ Laplacian\ spectrum\n
comment27.params=h
comment27.target=boolean\ Qcospectral(Graph)
comment27.text=\ \n\ Checks\ whether\ two\ graphs\ have\ the\ same\ signless\ Laplacian\ spectrum\n
comment28.params=h
comment28.target=boolean\ Dcospectral(Graph)
comment28.text=\ \n\ Checks\ whether\ two\ graphs\ have\ the\ same\ distance\ spectrum\n
comment29.params=h
comment29.target=boolean\ Mcospectral(Graph)
comment29.text=\ \n\ Checks\ whether\ two\ graphs\ have\ the\ same\ modularity\ spectrum\n
comment3.params=
comment3.target=int\ n()
comment3.text=\ \n\ Methods\ returning\ values\ of\ numbers\ of\ vertices,\ edges,\ degrees\ and\ adjacency\ matrix\n
comment30.params=mat
comment30.target=boolean\ integralSpectrum(int[][])
comment30.text=\ \n\ Auxiliary\ function\ to\ check\ whether\ an\ integer\ matrix\ has\ integer\ eigenvalues.\n\ "static"\ means\ it\ is\ a\ method\ of\ the\ class\ itself,\n\ so\ that\ it\ has\ to\ be\ called\ as\ Graph.integralSpectrum(matrix).\n\ Assumption\:\ mat\ is\ a\ square\ matrix\n
comment31.params=dmat
comment31.target=boolean\ integralSpectrum(double[][])
comment31.text=\n\ Auxiliary\ function\ to\ check\ whether\ a\ double\ matrix\ has\ integer\ eigenvalues.\n\ Assumption\:\ mat\ is\ a\ square\ matrix\n
comment32.params=
comment32.target=boolean\ Aintegral()
comment32.text=\ \n\ Is\ adjacency\ spectrum\ integral?\n
comment33.params=
comment33.target=boolean\ Lintegral()
comment33.text=\ \n\ Is\ Laplacian\ spectrum\ integral?\n
comment34.params=
comment34.target=boolean\ Qintegral()
comment34.text=\ \n\ Is\ signless\ Laplacian\ spectrum\ integral?\n
comment35.params=
comment35.target=boolean\ Dintegral()
comment35.text=\ \n\ Is\ distance\ spectrum\ integral?\n
comment36.params=
comment36.target=boolean\ Mintegral()
comment36.text=\n\ Is\ modularity\ spectrum\ integral?\n
comment37.params=eigs
comment37.target=double\ deviation(double[])
comment37.text=\n\ Auxiliary\ function\ for\ calculation\ of\ energies\n
comment38.params=mat
comment38.target=double\ matrixEnergy(int[][])
comment38.text=\ \n\ Matrix\ energy\ is\ deviation\ from\ the\ average\ of\ its\ eigenvalues.\n\ "static"\ means\ it\ is\ a\ method\ of\ the\ class\ itself,\n\ so\ that\ it\ has\ to\ be\ called\ as\ Graph.matrixEnergy(matrix).\n\ Assumption\:\ mat\ is\ a\ square\ matrix\n
comment39.params=dmat
comment39.target=double\ matrixEnergy(double[][])
comment4.params=
comment4.target=int\ m()
comment40.params=
comment40.target=double\ energy()
comment40.text=\n\ Adjacency\ energy\n
comment41.params=
comment41.target=double\ Aenergy()
comment42.params=
comment42.target=double\ Lenergy()
comment42.text=\n\ Laplacian\ energy\n
comment43.params=
comment43.target=double\ Qenergy()
comment43.text=\n\ Signless\ Laplacian\ energy\n
comment44.params=
comment44.target=double\ Denergy()
comment44.text=\n\ Distance\ energy\n
comment45.params=
comment45.target=double\ Menergy()
comment45.text=\n\ Modularity\ energy\n
comment46.params=
comment46.target=double\ LEL()
comment46.text=\ \n\ LEL,\ Laplacian-like\ energy\n
comment47.params=
comment47.target=double\ estrada()
comment47.text=\n\ Estrada\ index\n
comment48.params=
comment48.target=double\ Lestrada()
comment48.text=\ \n\ Laplacian\ Estrada\ index\n
comment49.params=
comment49.target=int\ diameter()
comment49.text=\n\ Diameter\n
comment5.params=
comment5.target=int[]\ degrees()
comment50.params=
comment50.target=int\ radius()
comment50.text=\ \n\ Radius\n
comment51.params=
comment51.target=int\ Wiener()
comment51.text=\ \n\ Wiener\ index\n
comment52.params=
comment52.target=double\ randic()
comment52.text=\ \n\ Randic\ index\n
comment53.params=
comment53.target=int\ zagreb1()
comment53.text=\ \n\ First\ Zagreb\ index\n
comment54.params=
comment54.target=int\ zagreb2()
comment54.text=\n\ Second\ Zagreb\ index\n
comment55.params=
comment55.target=double\ dshi()
comment55.text=\ \n\ Distance-sum\ heterogeneity\ index\ is\ defined\ by\ Estrada\ and\ Vargas-Estrada\n\ in\ Appl.\ Math.\ Comput.\ 218\ (2012),\ 10393-10405\ as\n\ dshi\ \=\ \\sum_{i\=1}^n\ \\frac{d_i}{s_i}\ -\ 2\\sum_{ij\\in\ E}\ (s_is_j)^{-1/2},\n\ where\ d_i\ is\ the\ degree\ of\ vertex\ i,\ while\ s_i\ is\ the\ sum\ of\ distances\ from\ i\ to\ all\ other\ vertices.\n
comment56.params=mat\ delims
comment56.target=java.lang.String\ printMatrix(int[][],\ java.lang.String)
comment56.text=\ \n\ Output\ printing\ formats\ for\ graph\ and\ its\ matrices\n\ Returns\ multiline\ string\ representing\ integer\ matrix\n\ "static"\ means\ it\ is\ a\ method\ of\ the\ class\ itself,\n\ so\ that\ it\ has\ to\ be\ called\ as\ Graph.printMatrix(mat,\ delims)\n\ delims\ is\ a\ three-character\ string,\ \n\ where\ character\ at\ position\ 0\ is\ put\ at\ the\ beginning\ of\ a\ matrix,\n\ character\ at\ position\ 1\ is\ put\ between\ entries,\n\ and\ character\ at\ position\ 2\ is\ put\ at\ the\ end\ of\ a\ matrix\ (think\ of\ "[,]").\n
comment57.params=mat
comment57.target=java.lang.String\ printMatrix(int[][])
comment58.params=dmat\ delims
comment58.target=java.lang.String\ printMatrix(double[][],\ java.lang.String)
comment58.text=\ \n\ Returns\ multiline\ string\ representing\ double\ matrix\n
comment59.params=dmat
comment59.target=java.lang.String\ printMatrix(double[][])
comment6.params=
comment6.target=int[][]\ Amatrix()
comment60.params=
comment60.target=java.lang.String\ printAmatrix()
comment60.text=\ \n\ String\ representing\ adjacency\ matrix\n
comment61.params=
comment61.target=java.lang.String\ printLmatrix()
comment61.text=\n\ String\ representing\ Laplacian\ matrix\ \ \ \ \n
comment62.params=
comment62.target=java.lang.String\ printQmatrix()
comment62.text=\n\ String\ representing\ signless\ Laplacian\ matrix\n
comment63.params=
comment63.target=java.lang.String\ printDmatrix()
comment63.text=\n\ String\ representing\ distance\ matrix\n
comment64.params=
comment64.target=java.lang.String\ printMmatrix()
comment64.text=\n\ String\ representing\ modularity\ matrix\n
comment65.params=
comment65.target=java.lang.String\ printEdgeList()
comment65.text=\n\ Returns\ string\ containing\ list\ of\ edges\n
comment66.params=
comment66.target=java.lang.String\ printDotFormat()
comment66.text=\n\ Returns\ string\ describing\ graph\ in\ a\ .dot\ format,\n\ needed\ for\ visualisation\ with\ Graphviz.\n
comment67.params=data
comment67.target=java.lang.String\ printDotFormat(java.lang.String)
comment67.text=\n\ Together\ with\ the\ graph,\ you\ can\ visualise\ additional\ data\n\ by\ placing\ them\ in\ a\ data\ string.\ \n\ This\ string\ is\ put\ as\ a\ label\ of\ a\ separate\ isolated\ vertex,\n\ and\ visualised\ by\ Graphviz\ in\ the\ same\ image\ next\ to\ the\ graph\ itself.\n
comment68.params=filename
comment68.target=void\ saveDotFormat(java.lang.String)
comment68.text=\ \n\ Writes\ the\ .dot\ format\ description\ of\ a\ graph\ to\ the\ file\n
comment69.params=filename\ data
comment69.target=void\ saveDotFormat(java.lang.String,\ java.lang.String)
comment69.text=\n\ Writes\ the\ .dot\ format\ description\ of\ a\ graph\ to\ the\ file,\n\ together\ with\ additional\ data\ placed\ as\ a\ label\ of\ a\ separate\ isolated\ vertex\n
comment7.params=
comment7.target=int[][]\ Lmatrix()
comment8.params=
comment8.target=int[][]\ Qmatrix()
comment9.params=
comment9.target=int[][]\ Dmatrix()
numComments=70
